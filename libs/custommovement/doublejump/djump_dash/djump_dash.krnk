# ===================================================================
# File: libs\game\custommovement\doublejump\djregistersync\djump_dash.krnk
# Author: blandrice
# Description: double-jump using registersync feature
# ===================================================================

#include <DJDashconfig_h.krnk>



# Add this both on the server and client side.

public action onPlayerSpawn(str id) {
	obj player = GAME.PLAYERS.findByID(id);
    player.timeLastCrouched = false;
    player.jumpCount = false;
    player.hasJumped = false;
    player.registerSyncValues("timeLastCrouched");
    player.registerSyncValues("timeLastOnGround");
    player.registerSyncValues("jumpCount");
    player.registerSyncValues("hasJumped");
    # dashing
    player.tLastDash = 50000;
    player.tLastAirStrafe = 50000;
    player.tLastCrouchPress = 50000;
    player.hasCrouchPressed = false;
    player.tLastOnGround = 0;
    player.haltedDash = false;
    player.hasCrouched = false;
    player.hasDashed = false;
    player.movDir = 0;
    player.dashRot = 0;
    player.plrLastY = 0;
    player.registerSyncValues("tLastDash");
    player.registerSyncValues("tLastAirStrafe");
    player.registerSyncValues("tLastCrouchPress");
    player.registerSyncValues("hasCrouchPressed");
    player.registerSyncValues("tLastOnGround");
    player.registerSyncValues("haltedDash");
    player.registerSyncValues("hasCrouched");
    player.registerSyncValues("hasDashed");
    player.registerSyncValues("movDir");
    player.registerSyncValues("dashRot");
    player.registerSyncValues("plrLastY");
}

public action onPlayerUpdate(str id, num delta, obj inputs) {
	obj player = GAME.PLAYERS.findByID(id);
	
    # Double-Jump stuff

    # crouch timestamp
    if ((bool) inputs.crouch) 
    {
        player.timeLastCrouched = 0;
        if (!(bool)player.hasCrouchPressed)
        {
            player.tLastCrouchPress = 0;
            player.hasCrouchPressed = true;
        }
    } 
    else 
    {
        (num) player.timeLastCrouched += delta;
        player.hasCrouchPressed = false;
    }
    # reset jumpcount on ground
    if((bool) player.onGround) 
    {
        player.jumpCount = (num) DJDashconfig_h_c.MAX_JUMPCOUNT-1;
        player.timeLastOnGround = 0;
        player.hasDashed = false;
        player.tLastOnGround = 0;
    } 
    else
    {
        (num) player.timeLastOnGround += delta;
    } 
    #  reset jumpCount after walljump
     if ((bool) DJDashconfig_h_c.WALLJUMP_REFRESHS && (bool) player.onWall && (bool) inputs.jump) 
    {
        player.jumpCount = (num) DJDashconfig_h_c.MAX_JUMPCOUNT-1;
    } 
    # input jump logic
    if((bool) inputs.jump) {
        if(!(bool)player.hasJumped  && (num)player.jumpCount > 0 && !(bool)player.onGround && ((num)player.timeLastOnGround > 150)) 
        {
            if (!(bool) player.onWall && (bool)DJDashconfig_h_c.WALLJUMP_REFRESHS) 
            {
                if ((bool) DJDashconfig_h_c.ENABLE_CROUCHJUMP && ((num)player.timeLastCrouched < (num)DJDashconfig_h_c.MS_DURATION_UNCROUCH)) 
                {
                    player.velocity.y = Math.lerp((num) DJDashconfig_h_c.VEL_CROUCHJUMP,(num) DJDashconfig_h_c.VEL_JUMP,(num)player.timeLastCrouched/(num) DJDashconfig_h_c.MS_DURATION_UNCROUCH);	# "moonjumping" calculation
                } else 
                {
                    player.velocity.y = (num) DJDashconfig_h_c.VEL_JUMP;	
                }
                if ((num) DJDashconfig_h_c.SOUND > 0) 
                {
                    GAME.SOUND.play2D(32576, 1, 0.5, false); # jump DJDashconfig_h_c.SOUND
                }

                (num)player.jumpCount--;
            }
            player.tLastDash = 50000;
            player.haltedDash = true;
            if ((num)player.jumpCount > 0)
            {
                player.hasDashed = false;
            }
        }
        player.hasJumped = true;
    }
    else {
        player.hasJumped = false;
    }

    # input dash logic
    if((bool)inputs.crouch && !(bool) player.onGround){
        if((!(bool)player.hasCrouched) && (!(bool)player.hasDashed)) {
            player.hasCrouched = true;
            player.tLastAirStrafe = 0;
        }
    } 
    else if (!(bool) player.onGround)
    {
        if ((bool) player.hasCrouched == true)
        {
            player.movDir = 0;
            # if((str) inputs.movDir == 'undefined'){
            #     player.movDir = 0;
            # } else {
            #     player.movDir = Math.PI2 - ((num)inputs.movDir + Math.PI/2);
            # }
            # player.dashRot = (num)player.rotation.x + (num) player.movDir;
            player.haltedDash = false;
            player.hasDashed = true;
            player.tLastDash = 0;
        }
        player.hasCrouched = false;
        player.tLastAirStrafe = 50000;
    } 
    else
    {
        player.hasCrouched = false;
        player.tLastAirStrafe = 50000;
    }
    
    (num) player.tLastDash += delta;
    (num) player.tLastAirStrafe += delta;
    (num) player.tLastOnGround += delta;
    (num) player.tLastCrouchPress += delta;
    # GAME.log((num) player.timeLastCrouched,(num) player.tLastOnGround);

    # if ((num) player.tLastAirStrafe < (num)DJDashconfig_h_c.MS_DURATION_CROUCHSTRAFE) {
    num curr_mag = Math.abs(Math.hypot((num)player.velocity.x,(num)player.velocity.z));
    if ((bool)inputs.crouch) {
        player.velocity.x = -curr_mag * Math.sin((num)player.rotation.x);
        player.velocity.z = -curr_mag * Math.cos((num)player.rotation.x);
    } 
    if (((num) player.tLastDash < (num)DJDashconfig_h_c.MS_DURATION_DASH) && ((num) player.tLastCrouchPress < (num) player.tLastOnGround)) {
        GAME.log("dash");
        GAME.log((num) player.tLastCrouchPress,(num) player.tLastOnGround);
        player.velocity.y = 0;
        # player.position.y = player.plrLastY;
        player.velocity.x = -Math.max(curr_mag,(num)DJDashconfig_h_c.VEL_DASH) * Math.sin((num)player.rotation.x);
        player.velocity.z = -Math.max(curr_mag,(num)DJDashconfig_h_c.VEL_DASH) * Math.cos((num)player.rotation.x);
        
    } else if (!(bool)player.haltedDash){
        player.haltedDash = true;
    } else if (((num)player.tLastDash < (num)DJDashconfig_h_c.MS_DURATION_DASH + (num)DJDashconfig_h_c.MS_DURATION_HOVER) && ((num) player.tLastCrouchPress < (num) player.tLastOnGround)) {
        GAME.log("hover");
        GAME.log((num) player.tLastCrouchPress,(num) player.tLastOnGround);
        # player.position.y = player.plrLastY;
        player.velocity.y = 0;
        player.velocity.x = (num)player.velocity.x / Math.pow((num)DJDashconfig_h_c.HALTRATIO,delta);
        player.velocity.z = (num)player.velocity.z / Math.pow((num)DJDashconfig_h_c.HALTRATIO,delta);
    } else {
        player.plrLastY = (num)player.position.y;
    }
}